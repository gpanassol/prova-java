<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">
<module name="Checker">
    <module name="TreeWalker">
        <module name="AvoidStarImport">
            <property name="severity" value="warning" />
        </module>

        <module name="RedundantImport">
            <!-- Checks for redundant import statements. -->
            <property name="severity" value="error" />
        </module>

        <module name="ImportOrder">
            <!-- Checks for out of order import statements. -->
            <property name="severity" value="error" />
            <property name="ordered" value="true" />
            <property name="groups" value="/([^j]|.[^a]|..[^v]|...[^a])/,/^javax?\./" />
            <!-- This ensures that static imports go to the end. -->
            <property name="option" value="bottom" />
            <property name="tokens" value="STATIC_IMPORT, IMPORT" />
        </module>

        <module name="IllegalImport">
            <property name="illegalPkgs" value="junit.framework" />
        </module>

        <module name="UnusedImports" />

        <!--
        WHITESPACE CHECKS
        -->
        <module name="GenericWhitespace" />

        <module name="WhitespaceAround">
            <!-- Checks that various tokens are surrounded by whitespace.
                 This includes most binary operators and keywords followed
                 by regular or curly braces.
            -->
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR,
        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
        SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN" />
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="severity" value="error" />
        </module>

        <module name="WhitespaceAfter">
            <!-- Checks that commas, semicolons and typecasts are followed by
                 whitespace.
            -->
            <property name="tokens" value="COMMA, SEMI, TYPECAST" />
            <property name="severity" value="error" />
        </module>

        <module name="NoWhitespaceAfter">
            <!-- Checks that there is no whitespace after various unary operators.
                 Linebreaks are allowed.
            -->
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,
        UNARY_PLUS" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <module name="NoWhitespaceBefore">
            <!-- Checks that there is no whitespace before various unary operators.
                 Linebreaks are allowed.
            -->
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC" />
            <property name="allowLineBreaks" value="true" />
            <property name="severity" value="error" />
        </module>

        <module name="ParenPad">
            <!-- Checks that there is no whitespace before close parens or after
                 open parens.
            -->
            <property name="severity" value="error" />
        </module>

        <!-- No System.out -->
        <module name="Regexp">
            <property name="format" value="System\.out\.println" />
            <property name="illegalPattern" value="true" />
        </module>

        <!-- No System.err -->
        <module name="Regexp">
            <!-- . matches any character, so we need to escape it and use \. to match dots. -->
            <property name="format" value="System\.err\.println" />
            <property name="illegalPattern" value="true" />
        </module>

        <!-- No printStackTrace -->
        <module name="Regexp">
            <!-- . matches any character, so we need to escape it and use \. to match dots. -->
            <property name="format" value="e\.printStackTrace\(\)" />
            <property name="illegalPattern" value="true" />
        </module>
    </module>

    <module name="NewlineAtEndOfFile"/>
</module>